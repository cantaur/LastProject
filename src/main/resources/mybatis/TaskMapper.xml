<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.pium.mapper.TaskMapper">

    <!--새 업무 셋팅-->
    <insert id="createTask" parameterType="TaskDTO">
        insert into task(task_title, task_content, task_startdate, task_duedate, milestone_seq,project_seq)
        values(#{task_title}, #{task_content}, #{task_startdate}, #{task_duedate}, #{milestone_seq},#{project_seq})
    </insert>

    <!--해당 프로젝트에서 생성된 업무 리스트-->
    <select id="taskList" parameterType="long" resultType="TaskDTO">
        SELECT * FROM task WHERE project_seq = #{project_seq}
    </select>

<!--    해당 마일스톤에서 생성된 업무 갯수-->
    <select id="countTask" parameterType="long" resultType="int">
        SELECT COUNT(task_seq) FROM task WHERE milestone_seq = #{milestone_seq}
    </select>

<!--    해당 마일스톤에서 완료된 업무의 갯수-->
    <select id="countClosedTask" parameterType="long" resultType="int">
        SELECT COUNT(task_status) FROM task WHERE milestone_seq = #{milestone_seq} AND task_status = 1
    </select>








    <!--task_member에 추가하기-->
    <insert id="insertTaskMember" parameterType="TaskmemberDTO">
        insert into task_member(task_seq, projmember_seq) values(#{task_seq}, #{projmember_seq})
    </insert>

















    <!--전체-->
    <select id="selectAll" resultType="TaskDTO">
        select * from task
    </select>
    <!--마일스톤시퀀스에 따른 필터링-->
    <select id="selectByMilestone" resultType="TaskDTO" parameterType="long">
        select * from task where milestone_seq=#{seq}
    </select>
    <!--진행중 임무, 종료된 임무 필터링-->
    <select id="selectByStatus" resultType="TaskDTO" parameterType="String">
        select * from task where task_status=#{status}
    </select>
    <!--중요도에 따른 필터링-->
    <select id="selectByPriority" resultType="TaskDTO" parameterType="String">
        select * from task where priority_code=#{priority}
    </select>



    <!--업무 isdelete변경-->
    <update id="delete" parameterType="long">
         <!--delete from task where task_seq=#{seq}-->
        update task set task_isdelete="1" where task_seq=#{seq}
    </update>
    <!--status 수정-->
    <update id="updateForStatus" parameterType="long">
        update task set task_status="1" where task_seq=#{seq}
    </update>
    <update id="updateForStatusZero" parameterType="long">
        update task set task_status="0" where task_seq=#{seq}
    </update>
    <!--업무 수정(status와 isdelete는 포함되어있지 않은 상태)-->
    <update id="updateAll" parameterType="TaskDTO">
        update task set task_title=#{task_title}, task_content=#{task_content}, task_startdate=#{task_startdate}, task_duedate=#{task_duedate}, milestone_seq=#{milestone_seq}, priority_code=#{priority_code}, label_seq=#{label_seq} where task_seq=#{task_seq}
    </update>
</mapper>